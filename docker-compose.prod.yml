version: '3.8'

# Ensure we use alpine wherever possible for low space
x-image:
    - &node node:16-alpine
    - &nginx nginx:stable-alpine3.17-slim
    - &php php:8.2-fpm-alpine
    - &mysql mariadb:10.11.4
    - &redis redis:6.0.20-alpine

x-volumes: &default-volumes 
    - 'storageVolume:/var/www/html/storage/app/public' # For persisting storage, such as images, media etc.
    - 'frameworkVolume:/var/www/html/storage/framework' # Persisting cache sessions etc.
    - 'logVolume:/var/www/html/storage/logs' # For persisting log files.

services:
    # Building without an image
    # app:
    #     build:
    #         context: .
    #         dockerfile: ./docker/php/Dockerfile.prod
    #         args:
    #             PHP_IMAGE: *php
    #             NODE_IMAGE: *node
    #     # Save the build artifacts of this image so it can be used by nginx for subsequent builds such as accessing static files, codebase etc.
    #     image: &app_image ${APP_NAME}_app_image
    #     container_name: ${APP_NAME}_app
    #     restart: always
    #     volumes: *default-volumes
    #     networks:
    #         - dockerize-laravel
    #     depends_on:
    #         - mysql
    #         - redis

    # Building with a docker image, may need to docker login beforehand if private repo image.
    app:
        # Save the build artifacts of this image so it can be used by nginx for subsequent builds such as accessing static files, codebase etc.
        image: &app_image sudiprai277/${APP_NAME}:latest
        container_name: ${APP_NAME}_app
        restart: always
        volumes: *default-volumes
        networks:
            - dockerize-laravel
        depends_on:
            - mysql
            - redis

    web:
        build:
            context: .
            dockerfile: ./docker/nginx/Dockerfile.prod
            args:
                NGINX_IMAGE: *nginx
                APP_IMAGE: *app_image
        container_name: ${APP_NAME}_web
        volumes: *default-volumes         
        restart: always   
        ports:
            - 80:80
            - 443:443
        networks:
            - dockerize-laravel
        depends_on:
            - app

    mysql:
        image: *mysql
        container_name: ${APP_NAME}_db
        restart: always
        ports:
            - ${DB_PORT:-3306}:3306
        environment:
            - MARIADB_USER=${DB_USERNAME}
            - MARIADB_PASSWORD=${DB_PASSWORD}
            - MARIADB_DATABASE=${DB_DATABASE}
            - MARIADB_ROOT_PASSWORD=root
        volumes:
            - 'mariadbdata:/var/lib/mysql'
            # Since, we are using this compose file for ci, we need a testing db, doesn't hurt.
            - './docker/mysql/init:/docker-entrypoint-initdb.d'
        networks:
            - dockerize-laravel

    redis:
        image: *redis
        container_name: ${APP_NAME}_redis
        ports:
            - ${REDIS_PORT:-6379}:6379
        restart: always
        volumes:
            - 'redisdata:/data'
        networks:
            - dockerize-laravel
    
    worker:
        build:
            context: .
            dockerfile: ./docker/worker/Dockerfile.prod
            args:
                APP_IMAGE: *app_image
        container_name: ${APP_NAME}_worker
        restart: always
        depends_on:
            - app
        networks:
            - dockerize-laravel

    cron:
        build:
            context: .
            dockerfile: ./docker/cron/Dockerfile.prod
            args:
                APP_IMAGE: *app_image
        container_name: ${APP_NAME}_cron
        restart: always
        depends_on:
            - app
        networks:
            - dockerize-laravel

volumes:
    mariadbdata:
    redisdata:
    storageVolume:
    frameworkVolume:
    logVolume:

networks:
    dockerize-laravel:
